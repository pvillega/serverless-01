# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

# app and org for use with dashboard.serverless.com
org: aracon
app: serverless-01
service: serverless-01

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  # configuration for aws in this profile, locally
  profile: learning-serverless
  # you can overwrite defaults here
  # stage: dev
  region: eu-west-2
  memorySize: 128

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: "arn:aws:s3:::learning-serverless-01-resizer-sample-service-images/*"
    - Effect: "Allow"
      Action:
        - "states:ListStateMachines"
        - "states:StartExecution"
      Resource: "arn:aws:states:*:*:*"


# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  executeStepFunction:
    handler: handler.executeStepFunction
    events:
      - s3:
          bucket: learning-serverless-01-resizer-sample-service-images
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .jpg
  resizer:
    handler: handler.resizer
  saveImageMetadata:
    handler: handler.saveImageMetadata
  blackAndWhiteCrop:
    handler: handler.blackAndWhiteCrop
  thumbnails:
    handler: handler.thumbnails
    events:
      - s3:
          bucket: learning-serverless-01-resizer-sample-service-images
          event: s3:ObjectCreated:*
          rules:
            - prefix: thumbnails/
            - suffix: .jpg


stepFunctions:
  stateMachines:
    imageProcessingMachine: #Name of the state machine
      definition:
        Comment: "Image processing state machine"
        StartAt: Parallel # First state
        States:
          Parallel: # Name of the first state
            Type: Parallel # Type of the state
            Next: FinalState # Name of the next state
            Branches: # Branches in the parallel state machine
              - StartAt: ResizeImage
                States:
                  ResizeImage:
                    Type: Task
                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-resizer
                    End: true
              - StartAt: SaveImageMetadata
                States:
                  SaveImageMetadata:
                    Type: Task
                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-saveImageMetadata
                    End: true
              - StartAt: BlackAndWhiteCrop
                States:
                  BlackAndWhiteCrop:
                    Type: Task
                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-blackAndWhiteCrop
                    End: true
          FinalState: # Final state name
            Type: Pass
            End: true

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
